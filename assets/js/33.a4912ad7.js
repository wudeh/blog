(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{557:function(n,t,s){"use strict";s.r(t);var e=s(6),a=Object(e.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[n._v("#")]),n._v(" 数据类型")]),n._v(" "),s("ul",[s("li",[n._v("基本数据类型：String、Number、Boolean、Symbol、Undefined、Null、BigInt。")]),n._v(" "),s("li",[n._v("引用数据类型：object、Array、Function、Date 等等")])]),n._v(" "),s("h2",{attrs:{id:"判断方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断方法"}},[n._v("#")]),n._v(" 判断方法")]),n._v(" "),s("ul",[s("li",[n._v("typeof")]),n._v(" "),s("li",[n._v("instanceof")]),n._v(" "),s("li",[n._v("Object.prototype.toString()")]),n._v(" "),s("li",[n._v("constructor")])]),n._v(" "),s("h2",{attrs:{id:"typeof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[n._v("#")]),n._v(" typeof")]),n._v(" "),s("ul",[s("li",[n._v("对于基本类型，除 null 以外，均可以返回正确的结果:包括 number、boolean、symbol、string、undefined、BigInt。")]),n._v(" "),s("li",[n._v("对于引用类型，除 function 返回 function 类型以外，对 Array、Function、Date 等等均返回 object 类型。")]),n._v(" "),s("li",[n._v("对于 null ，返回 object 类型。")]),n._v(" "),s("li",[s("code",[n._v("typeof")]),n._v("是操作符而不是函数，用来检测变量的类型")]),n._v(" "),s("li",[n._v("typeof 的判断原理：js 中数据类型在底层上是用二进制表示的，前三位（低位）代表数据类型")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('000：对象（因为null的二进制全是0，所以也被typeof判断为Object类型）\n110：布尔\n100：字符串\n010：浮点数\n1：整数\n\nlet num = 18;\nlet str = "yhd";\nlet show = true;\nlet sym = Symbol();\nlet data = undefined;\nlet info = null;\n\nconsole.log(typeof num); // number\nconsole.log(typeof str); // string\nconsole.log(typeof show); // boolean\nconsole.log(typeof sym); // symbol\nconsole.log(typeof data); // undefined\nconsole.log(typeof info); // object\n\n\nlet fun = function add() {};\nlet arr = ["yhd", "gsr"];\nlet obj = {name: "yhd", age: "23"};\nlet date = new Date();\n\n\nconsole.log(typeof fun); // function\nconsole.log(typeof arr); // object\nconsole.log(typeof obj); // object\nconsole.log(typeof date); // object\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"instance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instance"}},[n._v("#")]),n._v(" instance")]),n._v(" "),s("ul",[s("li",[n._v("instanceof 可以正确判断对象的数据类型，用来判断 A 是否为 B 的实例，表达式为： "),s("strong",[n._v("A instanceof B")]),n._v("，如果 A 是 B 的实例，则返回 true，否则返回 false。因为内部机制是通过判断 "),s("strong",[n._v("A")]),n._v(" 对象的原型链中是不是能找到 "),s("strong",[n._v("B")]),n._v(" 构造函数的"),s("strong",[n._v("prototype")]),n._v("。")]),n._v(" "),s("li",[n._v("示例")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('let fun = function add() {};\nlet arr = ["yhd", "gsr"];\nlet obj = {name: "yhd", age: "23"};\nlet date = new Date();\n\nconsole.log(fun instanceof Function); // true\nconsole.log(arr instanceof Array); // true\nconsole.log(obj instanceof Object); // true\nconsole.log(date instanceof Date); // true\n\nconsole.log(arr instanceof Object) // true\nconsole.log(fun instanceof Object); // true\nconsole.log(date instanceof Object); // true\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("ul",[s("li",[n._v("手写 instance")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function instance(A,B) {\n    if(typeof leftVaule !== 'object' || leftVaule === null) return false;\n    A = A.__proto__;\n    B = B.prototype;\n    while(true){\n    \tif(A===NULL) return false;\t// 找到头了还没找到\n        if(A===B) return true;\t\t//\n        A=A.__proto__;\t\t\t\t// 没找到就沿着A的原型链继续找\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("ul",[s("li",[n._v("instanceof 能够判断出 arr 是 Array 的实例，但他也认为 arr 也是 Object 的实例，为什么呢？\n原因：从 instanceof 中能够判断出 arr.**proto ** 指向 Array.prototype，而 Array.prototype.**proto ** 又指向了 Object.prototype，最终 Object.prototype.**proto ** 指向了 null，标志着原型链的结束。因此，arr、Array、Object 就在内部形成了一条原型链。\n在原型链上，arr 的 **proto ** 直接指向 Array.prototype，间接指向 Object.prototype。function、date 同理。")]),n._v(" "),s("li",[n._v("instanceof 只能用来判断两个对象是否属于"),s("strong",[n._v("实例关系")]),n._v("， 而不能判断一个对象实例具体属于哪种类型。")]),n._v(" "),s("li",[n._v("弊端：由于 instanceof 只能用来判断对象，所以下面的情况是不能判断的：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("var a = new Number(1);\na instanceof Number // true，\n1 instanceof Number // false，无法判断基本类型\n\nconst fakeArr = { __proto__: Array.prototype, length: 0 };\nfakeArr instanceof Array; // true\n\nlet a = 'aa';\na instanceof String; // false\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br")])]),s("h2",{attrs:{id:"constructor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[n._v("#")]),n._v(" constructor")]),n._v(" "),s("ul",[s("li",[n._v("当一个函数被定义时，JS 引擎会为函数添加 prototype 原型，然后再在 prototype 上添加一个 constructor 属性，并让其指向他的构造函数")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('let num = 18;\nlet str = "yhd";\nlet show = true;\nlet sym = Symbol();\nlet data = undefined;\nlet info = null;\n\nconsole.log(num.constructor); // ƒ Number() { [native code] }\nconsole.log(str.constructor); // ƒ String() { [native code] }\nconsole.log(show.constructor); // ƒ Boolean() { [native code] }\nconsole.log(sym.constructor); // ƒ Symbol() { [native code] }\nconsole.log(data.constructor); // Cannot read property \'constructor\' of undefined\nconsole.log(info.constructor); // Cannot read property \'constructor\' of null\n\nlet fun = function add() {};\nlet arr = ["yhd", "gsr"];\nlet obj = {name: "yhd", age: "23"};\nlet date = new Date();\n\nconsole.log(fun.constructor); // ƒ Function() { [native code] }\nconsole.log(arr.constructor); // ƒ Array() { [native code] }\nconsole.log(obj.constructor); // ƒ Object() { [native code] }\nconsole.log(date.constructor); // ƒ Date() { [native code] }\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br")])]),s("ul",[s("li",[n._v("null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。")]),n._v(" "),s("li",[n._v("函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object")])]),n._v(" "),s("h2",{attrs:{id:"tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[n._v("#")]),n._v(" toString")]),n._v(" "),s("ul",[s("li",[n._v("toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object xxx] ，其中 xxx 就是对象的类型。")]),n._v(" "),s("li",[n._v("对于 Object 对象，直接调用 toString() 就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Object.prototype.toString.call(1);    // [object Number]\nObject.prototype.toString.call('');   // [object String]\nObject.prototype.toString.call(true); // [object Boolean]\nObject.prototype.toString.call(Symbol()); //[object Symbol]\nObject.prototype.toString.call(undefined); // [object Undefined]\nObject.prototype.toString.call(null); // [object Null]\n\nObject.prototype.toString(Object); // [object Object]\nObject.prototype.toString.call(new Function()) ; // [object Function]\nObject.prototype.toString.call([]) ; // [object Array]\nObject.prototype.toString.call(new Date()) ; // [object Date]\n\nObject.prototype.toString.call(new RegExp()) ; // [object RegExp]\nObject.prototype.toString.call(new Error()) ; // [object Error]\n\nObject.prototype.toString.call(NaN) ; // [object Number]\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("ul",[s("li",[n._v("什么类型都可以精准判断")])]),n._v(" "),s("h2",{attrs:{id:"es6-中的判断方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-中的判断方法"}},[n._v("#")]),n._v(" ES6 中的判断方法")]),n._v(" "),s("ul",[s("li",[n._v("判断数组：Array.isArray()")])])])}),[],!1,null,null,null);t.default=a.exports}}]);